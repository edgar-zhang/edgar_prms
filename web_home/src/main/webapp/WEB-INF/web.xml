<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" version="3.0">

  <display-name>prms_home</display-name>

  <!--日志记录属性配置-->
  <context-param>
    <param-name>log4jConfigLocation</param-name>
    <param-value>classpath:log4j.properties</param-value><!-- 载入log4j配置文件 -->
  </context-param>
  <context-param>
    <param-name>log4jRefreshInterval</param-name>
    <param-value>60000</param-value><!--Spring刷新Log4j配置文件的间隔60秒,单位为millisecond-->
  </context-param>

  <!--spring log4j 监听器 -->
  <listener>
    <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
  </listener>
  <!-- Spring -->
    <context-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>classpath:spring-context.xml</param-value>
    </context-param>
    <!-- 配置加载上下文监听器 -->
    <listener>
      <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
    <!--
        在Spring2.0中除了以前的Singleton和Prototype外又加入了三个新的web作用域，
        分别为request、session和global session，如果你想让你的容器里的某个bean拥有其中某种新的web作用域，
        除了在bean级上配置相应的scope属性，还必须在容器级做一个额外的初始化配置。

        为什么需要额外的配置RequestContextFilter
        也许会有一个疑问，已经通过ContextLoaderListener(或ContextLoaderServlet)将Web容器与Spring容器整合，
        为什么这里还要用额外的RequestContextListener以支持Bean的另外3个作用域，
        原因是ContextLoaderListener实现ServletContextListener监听器接口，
        而ServletContextListener只负责监听Web容器的启动和关闭的事件。
        RequestContextFilter实现ServletRequestListener监听器接口，
        该监听器监听HTTP请求事件，Web服务器接收的每次请求都会通知该监听器。
        通过配置RequestContextFilter，Spring容器与Web容器结合的更加密切。
    -->
    <listener>
      <listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
    </listener>

    <!-- 防止Spring内存溢出监听器 -->
    <listener>
      <listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
    </listener>


  <!-- 配置字符编码的过滤器(解决post请求乱码 ) -->
  <filter>
    <filter-name>encodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <async-supported>true</async-supported>
    <init-param>
      <param-name>encoding</param-name>
      <param-value>UTF-8</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>encodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <!-- 配置DispatcherServlet
      servlet-name可以随便写，我们命名是springDispatcherServlet，
      意思是spring的请求处理器，这个概念很重要。
   -->
  <!-- Springmvc servlet -->
  <servlet>
    <servlet-name>SpringMVC</servlet-name>

    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <!--配置DispatcherServlet的一个初始化参数，
        配置Springmvc的配置文件的位置和名称 -->
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>classpath:config/spring-mvc.xml</param-value>
    </init-param>
    <!-- 1代表项目加载的时候被创建，不是被访问的时候才被创建 -->
    <load-on-startup>1</load-on-startup>
    <!-- 开启异步支持 -->
    <async-supported>true</async-supported>
  </servlet>
  <servlet-mapping>
    <servlet-name>SpringMVC</servlet-name>
    <!-- 应答请求的地址，/代表可以应答所有请求 -->
    <url-pattern>/</url-pattern>
  </servlet-mapping>

  <!-- shiro 安全过滤器 -->
  <!--<filter>
    <filter-name>shiroFilter</filter-name>
    <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    <async-supported>true</async-supported>
    <init-param>
      <param-name>targetFilterLifecycle</param-name>
      <param-value>true</param-value>
    </init-param>
  </filter>

  <filter-mapping>
    <filter-name>shiroFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>-->

  <!-- 验证码过滤器需要放到Shiro之后 因为Shiro将包装HttpSession 如果不 可能造成两次的sesison id 不一样 -->
  <!--<filter>
    <filter-name>rcCaptchaFilter</filter-name>
    <filter-class>com.roncoo.pay.permission.shiro.filter.RcCaptchaFilter</filter-class>
    <async-supported>true</async-supported>
  </filter>
  <filter-mapping>
    <filter-name>rcCaptchaFilter</filter-name>
    <url-pattern>/rcCaptcha.jpg</url-pattern>
  </filter-mapping>-->

  <welcome-file-list>
    <welcome-file>/pages/system/index.jsp</welcome-file>
  </welcome-file-list>

  <!-- 会话超时时间 -->
  <session-config>
    <session-timeout>30</session-timeout>
  </session-config>

  <!-- 错误页面配置 -->
  <error-page>
    <error-code>400</error-code>
    <location>/pages/common/error/400.jsp</location>
  </error-page>
  <error-page>
    <error-code>404</error-code>
    <location>/pages/common/error/404.jsp</location>
  </error-page>
  <error-page>
    <exception-type>java.lang.Throwable</exception-type>
    <location>/pages/common/error/500.jsp</location>
  </error-page>
  <error-page>
    <error-code>500</error-code>
    <location>/pages/common/error/500.jsp</location>
  </error-page>



</web-app>


  
